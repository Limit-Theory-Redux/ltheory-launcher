name: "publish"

on:
  push:
    branches:
      - main
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - '**/.vscode/**'
    - '**/.gitattributes'
    - '**/.gitignore'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `LTR Launcher v${process.env.PACKAGE_VERSION}`,
              body: 'Includes the windows installer.\r\nAlso includes "portable executable", keep in mind that this one does not ensure WebView2 is installed on your system, nor sets the environment variables needed for the auto updater.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        name: setup node
        with:
          node-version: 18
      - uses: dtolnay/rust-toolchain@stable
        name: install Rust stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
      - name: Build Portable Binaries (Windows)
        if: ${{ matrix.runner == 'windows-latest' }}
        run: |
          cargo build --target ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
          mv ./target/${{ matrix.target }}/release/LTheoryReduxLauncher.exe ./target/${{ matrix.target }}/release/LTheoryReduxLauncher_${{ github.ref_name }}_x64-portable.exe
      - name: Upload Portable Binaries (Windows)
        if: ${{ matrix.runner == 'windows-latest' }}
        run: bash -c 'gh release upload ${{ github.ref_name }} ./target/${{ matrix.target }}/{release/LTheoryReduxLauncher_${{ github.ref_name }}_x64-portable.exe} --clobber'

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
